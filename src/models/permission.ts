/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { number, object, optional, Schema } from '../schema';

/** This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 } */
export interface Permission {
  /** User Id, can be only first parameter */
  userId?: number;
  /** Device Id, can be first parameter or second only in combination with userId */
  deviceId?: number;
  /** Group Id, can be first parameter or second only in combination with userId */
  groupId?: number;
  /** Geofence Id, can be second parameter only */
  geofenceId?: number;
  /** Notification Id, can be second parameter only */
  notificationId?: number;
  /** Calendar Id, can be second parameter only and only in combination with userId */
  calendarId?: number;
  /** Computed Attribute Id, can be second parameter only */
  attributeId?: number;
  /** Driver Id, can be second parameter only */
  driverId?: number;
  /** User Id, can be second parameter only and only in combination with userId */
  managedUserId?: number;
}

export const permissionSchema: Schema<Permission> = object({
  userId: ['userId', optional(number())],
  deviceId: ['deviceId', optional(number())],
  groupId: ['groupId', optional(number())],
  geofenceId: ['geofenceId', optional(number())],
  notificationId: ['notificationId', optional(number())],
  calendarId: ['calendarId', optional(number())],
  attributeId: ['attributeId', optional(number())],
  driverId: ['driverId', optional(number())],
  managedUserId: ['managedUserId', optional(number())],
});
