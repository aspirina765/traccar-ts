/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';

export interface Position {
  id?: number;
  deviceId?: number;
  protocol?: string;
  /** in IS0 8601 format. eg. `1963-11-22T18:30:00Z` */
  deviceTime?: string;
  /** in IS0 8601 format. eg. `1963-11-22T18:30:00Z` */
  fixTime?: string;
  /** in IS0 8601 format. eg. `1963-11-22T18:30:00Z` */
  serverTime?: string;
  outdated?: boolean;
  valid?: boolean;
  latitude?: number;
  longitude?: number;
  altitude?: number;
  /** in knots */
  speed?: number;
  course?: number;
  address?: string;
  accuracy?: number;
  network?: unknown;
  geofenceIds?: number[];
  attributes?: unknown;
}

export const positionSchema: Schema<Position> = object({
  id: ['id', optional(number())],
  deviceId: ['deviceId', optional(number())],
  protocol: ['protocol', optional(string())],
  deviceTime: ['deviceTime', optional(string())],
  fixTime: ['fixTime', optional(string())],
  serverTime: ['serverTime', optional(string())],
  outdated: ['outdated', optional(boolean())],
  valid: ['valid', optional(boolean())],
  latitude: ['latitude', optional(number())],
  longitude: ['longitude', optional(number())],
  altitude: ['altitude', optional(number())],
  speed: ['speed', optional(number())],
  course: ['course', optional(number())],
  address: ['address', optional(string())],
  accuracy: ['accuracy', optional(number())],
  network: ['network', optional(unknown())],
  geofenceIds: ['geofenceIds', optional(array(number()))],
  attributes: ['attributes', optional(unknown())],
});
