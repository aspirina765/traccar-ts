/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { Command, commandSchema } from '../models/command';
import { CommandType, commandTypeSchema } from '../models/commandType';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class CommandsController extends BaseController {
  /**
   * Without params, it returns a list of Saved Commands the user has access to
   *
   * @param all      Can only be used by admins or managers to fetch all entities
   * @param userId   Standard users can use this only with their own _userId_
   * @param deviceId Standard users can use this only with _deviceId_s, they have access to
   * @param groupId  Standard users can use this only with _groupId_s, they have access to
   * @param refresh
   * @return Response from the API call
   */
  async fetchAListOfSavedCommands(
    all?: boolean,
    userId?: number,
    deviceId?: number,
    groupId?: number,
    refresh?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Command[]>> {
    const req = this.createRequest('GET', '/commands');
    const mapped = req.prepareArgs({
      all: [all, optional(boolean())],
      userId: [userId, optional(number())],
      deviceId: [deviceId, optional(number())],
      groupId: [groupId, optional(number())],
      refresh: [refresh, optional(boolean())],
    });
    req.query('all', mapped.all);
    req.query('userId', mapped.userId);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    req.query('refresh', mapped.refresh);
    return req.callAsJson(array(commandSchema), requestOptions);
  }

  /**
   * Create a Saved Command
   *
   * @param body
   * @return Response from the API call
   */
  async createASavedCommand(
    body: Command,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Command>> {
    const req = this.createRequest('POST', '/commands');
    const mapped = req.prepareArgs({ body: [body, commandSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(commandSchema, requestOptions);
  }

  /**
   * Update a Saved Command
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateASavedCommand(
    id: number,
    body: Command,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Command>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, commandSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/commands/${mapped.id}`;
    return req.callAsJson(commandSchema, requestOptions);
  }

  /**
   * Delete a Saved Command
   *
   * @param id
   * @return Response from the API call
   */
  async deleteASavedCommand(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/commands/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * Return a list of saved commands linked to Device and its groups, filtered by current Device protocol
   * support
   *
   * @param deviceId Standard users can use this only with _deviceId_s, they have access to
   * @return Response from the API call
   */
  async fetchAListOfSavedCommandsSupportedByDeviceAtTheMoment(
    deviceId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Command[]>> {
    const req = this.createRequest('GET', '/commands/send');
    const mapped = req.prepareArgs({
      deviceId: [deviceId, optional(number())],
    });
    req.query('deviceId', mapped.deviceId);
    req.throwOn(400, ApiError, 'Could happen when the user doesn\'t have permission for the device');
    return req.callAsJson(array(commandSchema), requestOptions);
  }

  /**
   * Dispatch a new command or Saved Command if _body.id_ set
   *
   * @param body
   * @return Response from the API call
   */
  async dispatchCommandsToDevice(
    body: Command,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Command>> {
    const req = this.createRequest('POST', '/commands/send');
    const mapped = req.prepareArgs({ body: [body, commandSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Could happen when the user doesn\'t have permission or an incorrect command _type_ for the device');
    return req.callAsJson(commandSchema, requestOptions);
  }

  /**
   * Fetch a list of available Commands for the Device or all possible Commands if Device ommited
   *
   * @param deviceId    Internal device identifier. Only works if device has already reported some
   *                               locations
   * @param protocol    Protocol name. Can be used instead of device id
   * @param textChannel When `true` return SMS commands. If not specified or `false` return data commands
   * @return Response from the API call
   */
  async fetchAListOfAvailableCommandsForTheDeviceOrAllPossibleCommandsIfDeviceOmmited(
    deviceId?: number,
    protocol?: string,
    textChannel?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CommandType[]>> {
    const req = this.createRequest('GET', '/commands/types');
    const mapped = req.prepareArgs({
      deviceId: [deviceId, optional(number())],
      protocol: [protocol, optional(string())],
      textChannel: [textChannel, optional(boolean())],
    });
    req.query('deviceId', mapped.deviceId);
    req.query('protocol', mapped.protocol);
    req.query('textChannel', mapped.textChannel);
    req.throwOn(400, ApiError, 'Could happen when trying to fetch from a device the user does not have permission');
    return req.callAsJson(array(commandTypeSchema), requestOptions);
  }
}
