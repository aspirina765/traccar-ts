/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { Device, deviceSchema } from '../models/device';
import {
  DeviceAccumulators,
  deviceAccumulatorsSchema,
} from '../models/deviceAccumulators';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class DevicesController extends BaseController {
  /**
   * Without any params, returns a list of the user's devices
   *
   * @param all      Can only be used by admins or managers to fetch all entities
   * @param userId   Standard users can use this only with their own _userId_
   * @param id       To fetch one or more devices. Multiple params can be passed like `id=31&id=42`
   * @param uniqueId To fetch one or more devices. Multiple params can be passed like
   *                            `uniqueId=333331&uniqieId=44442`
   * @return Response from the API call
   */
  async fetchAListOfDevices(
    all?: boolean,
    userId?: number,
    id?: number,
    uniqueId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Device[]>> {
    const req = this.createRequest('GET', '/devices');
    const mapped = req.prepareArgs({
      all: [all, optional(boolean())],
      userId: [userId, optional(number())],
      id: [id, optional(number())],
      uniqueId: [uniqueId, optional(string())],
    });
    req.query('all', mapped.all);
    req.query('userId', mapped.userId);
    req.query('id', mapped.id);
    req.query('uniqueId', mapped.uniqueId);
    req.throwOn(400, ApiError, 'No permission');
    return req.callAsJson(array(deviceSchema), requestOptions);
  }

  /**
   * Create a Device
   *
   * @param body
   * @return Response from the API call
   */
  async createADevice(
    body: Device,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Device>> {
    const req = this.createRequest('POST', '/devices');
    const mapped = req.prepareArgs({ body: [body, deviceSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(deviceSchema, requestOptions);
  }

  /**
   * Update a Device
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateADevice(
    id: number,
    body: Device,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Device>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, deviceSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/devices/${mapped.id}`;
    return req.callAsJson(deviceSchema, requestOptions);
  }

  /**
   * Delete a Device
   *
   * @param id
   * @return Response from the API call
   */
  async deleteADevice(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/devices/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * Update total distance and hours of the Device
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateTotalDistanceAndHoursOfTheDevice(
    id: number,
    body: DeviceAccumulators,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, deviceAccumulatorsSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/devices/${mapped.id}/accumulators`;
    return req.call(requestOptions);
  }
}
