/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { User, userSchema } from '../models/user';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class UsersController extends BaseController {
  /**
   * Fetch a list of Users
   *
   * @param userId Can only be used by admin or manager users
   * @return Response from the API call
   */
  async fetchAListOfUsers(
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User[]>> {
    const req = this.createRequest('GET', '/users');
    const mapped = req.prepareArgs({ userId: [userId, optional(string())] });
    req.query('userId', mapped.userId);
    req.throwOn(400, ApiError, 'No Permission');
    return req.callAsJson(array(userSchema), requestOptions);
  }

  /**
   * Create a User
   *
   * @param body
   * @return Response from the API call
   */
  async createAUser(
    body: User,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User>> {
    const req = this.createRequest('POST', '/users');
    const mapped = req.prepareArgs({ body: [body, userSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(userSchema, requestOptions);
  }

  /**
   * Update a User
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateAUser(
    id: number,
    body: User,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, userSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/users/${mapped.id}`;
    return req.callAsJson(userSchema, requestOptions);
  }

  /**
   * Delete a User
   *
   * @param id
   * @return Response from the API call
   */
  async deleteAUser(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/users/${mapped.id}`;
    return req.call(requestOptions);
  }
}
