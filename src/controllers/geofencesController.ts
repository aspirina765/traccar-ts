/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Geofence, geofenceSchema } from '../models/geofence';
import { array, boolean, number, optional } from '../schema';
import { BaseController } from './baseController';

export class GeofencesController extends BaseController {
  /**
   * Without params, it returns a list of Geofences the user has access to
   *
   * @param all      Can only be used by admins or managers to fetch all entities
   * @param userId   Standard users can use this only with their own _userId_
   * @param deviceId Standard users can use this only with _deviceId_s, they have access to
   * @param groupId  Standard users can use this only with _groupId_s, they have access to
   * @param refresh
   * @return Response from the API call
   */
  async fetchAListOfGeofences(
    all?: boolean,
    userId?: number,
    deviceId?: number,
    groupId?: number,
    refresh?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Geofence[]>> {
    const req = this.createRequest('GET', '/geofences');
    const mapped = req.prepareArgs({
      all: [all, optional(boolean())],
      userId: [userId, optional(number())],
      deviceId: [deviceId, optional(number())],
      groupId: [groupId, optional(number())],
      refresh: [refresh, optional(boolean())],
    });
    req.query('all', mapped.all);
    req.query('userId', mapped.userId);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    req.query('refresh', mapped.refresh);
    return req.callAsJson(array(geofenceSchema), requestOptions);
  }

  /**
   * Create a Geofence
   *
   * @param body
   * @return Response from the API call
   */
  async createAGeofence(
    body: Geofence,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Geofence>> {
    const req = this.createRequest('POST', '/geofences');
    const mapped = req.prepareArgs({ body: [body, geofenceSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(geofenceSchema, requestOptions);
  }

  /**
   * Update a Geofence
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateAGeofence(
    id: number,
    body: Geofence,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Geofence>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, geofenceSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/geofences/${mapped.id}`;
    return req.callAsJson(geofenceSchema, requestOptions);
  }

  /**
   * Delete a Geofence
   *
   * @param id
   * @return Response from the API call
   */
  async deleteAGeofence(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/geofences/${mapped.id}`;
    return req.call(requestOptions);
  }
}
