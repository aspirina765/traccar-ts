/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { Group, groupSchema } from '../models/group';
import { array, boolean, number, optional } from '../schema';
import { BaseController } from './baseController';

export class GroupsController extends BaseController {
  /**
   * Without any params, returns a list of the Groups the user belongs to
   *
   * @param all    Can only be used by admins or managers to fetch all entities
   * @param userId Standard users can use this only with their own _userId_
   * @return Response from the API call
   */
  async fetchAListOfGroups(
    all?: boolean,
    userId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Group[]>> {
    const req = this.createRequest('GET', '/groups');
    const mapped = req.prepareArgs({
      all: [all, optional(boolean())],
      userId: [userId, optional(number())],
    });
    req.query('all', mapped.all);
    req.query('userId', mapped.userId);
    return req.callAsJson(array(groupSchema), requestOptions);
  }

  /**
   * Create a Group
   *
   * @param body
   * @return Response from the API call
   */
  async createAGroup(
    body: Group,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Group>> {
    const req = this.createRequest('POST', '/groups');
    const mapped = req.prepareArgs({ body: [body, groupSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'No permission');
    return req.callAsJson(groupSchema, requestOptions);
  }

  /**
   * Update a Group
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updateAGroup(
    id: number,
    body: Group,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Group>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, groupSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/groups/${mapped.id}`;
    return req.callAsJson(groupSchema, requestOptions);
  }

  /**
   * Delete a Group
   *
   * @param id
   * @return Response from the API call
   */
  async deleteAGroup(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/groups/${mapped.id}`;
    return req.call(requestOptions);
  }
}
