/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { User, userSchema } from '../models/user';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SessionController extends BaseController {
  /**
   * Fetch Session information
   *
   * @param token
   * @return Response from the API call
   */
  async fetchSessionInformation(
    token?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User>> {
    const req = this.createRequest('GET', '/session');
    const mapped = req.prepareArgs({ token: [token, optional(string())] });
    req.query('token', mapped.token);
    req.throwOn(404, ApiError, 'Not Found');
    return req.callAsJson(userSchema, requestOptions);
  }

  /**
   * Create a new Session
   *
   * @param email
   * @param password
   * @return Response from the API call
   */
  async createANewSession(
    email: string,
    password: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User>> {
    const req = this.createRequest('POST', '/session');
    const mapped = req.prepareArgs({
      email: [email, string()],
      password: [password, string()],
    });
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.form({
      email: mapped.email,
      password: mapped.password,
    });
    req.throwOn(401, ApiError, 'Unauthorized');
    return req.callAsJson(userSchema, requestOptions);
  }

  /**
   * Close the Session
   *
   * @return Response from the API call
   */
  async closeTheSession(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/session');
    return req.call(requestOptions);
  }

  /**
   * Fetch Session information
   *
   * @return Response from the API call
   */
  async fetchSessionInformation1(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/session/openid/auth');
    return req.call(requestOptions);
  }

  /**
   * OpenID Callback
   *
   * @return Response from the API call
   */
  async openIDCallback(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/session/openid/callback');
    return req.call(requestOptions);
  }
}
