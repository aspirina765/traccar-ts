/**
 * TraccarLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Event, eventSchema } from '../models/event';
import { Position, positionSchema } from '../models/position';
import { ReportStops, reportStopsSchema } from '../models/reportStops';
import { ReportSummary, reportSummarySchema } from '../models/reportSummary';
import { ReportTrips, reportTripsSchema } from '../models/reportTrips';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ReportsController extends BaseController {
  /**
   * At least one _deviceId_ or one _groupId_ must be passed
   *
   * @param from     in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param to       in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param deviceId
   * @param groupId
   * @return Response from the API call
   */
  async fetchAListOfPositionsWithinTheTimePeriodForTheDevicesOrGroups(
    from: string,
    to: string,
    deviceId?: number[],
    groupId?: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Position[]>> {
    const req = this.createRequest('GET', '/reports/route');
    const mapped = req.prepareArgs({
      from: [from, string()],
      to: [to, string()],
      deviceId: [deviceId, optional(array(number()))],
      groupId: [groupId, optional(array(number()))],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    return req.callAsJson(array(positionSchema), requestOptions);
  }

  /**
   * At least one _deviceId_ or one _groupId_ must be passed
   *
   * @param from     in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param to       in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param deviceId
   * @param groupId
   * @param type     % can be used to return events of all types
   * @return Response from the API call
   */
  async fetchAListOfEventsWithinTheTimePeriodForTheDevicesOrGroups(
    from: string,
    to: string,
    deviceId?: number[],
    groupId?: number[],
    type?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Event[]>> {
    const req = this.createRequest('GET', '/reports/events');
    const mapped = req.prepareArgs({
      from: [from, string()],
      to: [to, string()],
      deviceId: [deviceId, optional(array(number()))],
      groupId: [groupId, optional(array(number()))],
      type: [type, optional(array(string()))],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    req.query('type', mapped.type);
    return req.callAsJson(array(eventSchema), requestOptions);
  }

  /**
   * At least one _deviceId_ or one _groupId_ must be passed
   *
   * @param from     in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param to       in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param deviceId
   * @param groupId
   * @return Response from the API call
   */
  async fetchAListOfReportSummaryWithinTheTimePeriodForTheDevicesOrGroups(
    from: string,
    to: string,
    deviceId?: number[],
    groupId?: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportSummary[]>> {
    const req = this.createRequest('GET', '/reports/summary');
    const mapped = req.prepareArgs({
      from: [from, string()],
      to: [to, string()],
      deviceId: [deviceId, optional(array(number()))],
      groupId: [groupId, optional(array(number()))],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    return req.callAsJson(array(reportSummarySchema), requestOptions);
  }

  /**
   * At least one _deviceId_ or one _groupId_ must be passed
   *
   * @param from     in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param to       in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param deviceId
   * @param groupId
   * @return Response from the API call
   */
  async fetchAListOfReportTripsWithinTheTimePeriodForTheDevicesOrGroups(
    from: string,
    to: string,
    deviceId?: number[],
    groupId?: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportTrips[]>> {
    const req = this.createRequest('GET', '/reports/trips');
    const mapped = req.prepareArgs({
      from: [from, string()],
      to: [to, string()],
      deviceId: [deviceId, optional(array(number()))],
      groupId: [groupId, optional(array(number()))],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    return req.callAsJson(array(reportTripsSchema), requestOptions);
  }

  /**
   * At least one _deviceId_ or one _groupId_ must be passed
   *
   * @param from     in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param to       in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
   * @param deviceId
   * @param groupId
   * @return Response from the API call
   */
  async fetchAListOfReportStopsWithinTheTimePeriodForTheDevicesOrGroups(
    from: string,
    to: string,
    deviceId?: number[],
    groupId?: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportStops[]>> {
    const req = this.createRequest('GET', '/reports/stops');
    const mapped = req.prepareArgs({
      from: [from, string()],
      to: [to, string()],
      deviceId: [deviceId, optional(array(number()))],
      groupId: [groupId, optional(array(number()))],
    });
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('deviceId', mapped.deviceId);
    req.query('groupId', mapped.groupId);
    return req.callAsJson(array(reportStopsSchema), requestOptions);
  }
}
